## mainnet (comment the following if you want to switch to devnet)
#PRIVATE_KEY = YOUR_PRIVATE_KEY
## devnet (un-comment the following if you want to switch to devnet)
# devnet pubkey: 4LypgcGps7zJMaMKUhpGHdrv282fhWJP8UnuF2xPvd1h
# another devnet pubkey: Cf9tLH2dibiwkiJwxn2Rvcyz4wdqUFQFRnSsAghmGKAW
# wallet 3 pubkey: J49J8ixVH2MFSRFMUDbVKX8FgdhQtBArFgJGZN9heb8G
PRIVATE_KEY = test

# recommend to use https://dev.helius.xyz/rpcs/my
# or https://shyft.to/dashboard/overview
DEVNET_ENDPOINT = https://api.devnet.solana.com
MAINNET_ENDPOINT = YOUR_RPC_MAINNET_ENDPOINT
# please get the api key in https://shyft.to/dashboard/overview
SHYFT_API_KEY = YOUR_SHYFT_API_KEY
# recommend to use 0.00009
# specify the fee for jito if you want to land your transaction faster
JITO_FEE = "0.001"

# TODO: adjust this
TAKE_PROFIT = 0.1 # sell when price up 10%
STOP_LOST = 0.2 # sell when price down 20%



PUBLIC KEY: 68FdMCtdp4DjXD1x8A3bRatD32M1RZdwfW3mb3SxfHHv
SECRET KEY: c70474d936997bcb5425875228b9e1ffc92b50677fc2896c7297be3b5af420f14c2609ebb88db15a5c642e064636fd3d62d47544c282db3d294aa8c19a805895
SECRET KEY ENCODED: 4ynLkrzx4q9DgwKhS9nudoCDzTcaKN7Ny3nygLTHnSTZ8TnLT69DDMYWfRFQmYTN2LFF1CeMiTWT3DwzSZAxdnYC
29Wdvcw4vnvP7WbwbwQKv8sBWVbnDzgZCBcXDfxW2bKxss3xPtvVLwgvhLzr126diyjUMSDrwJhRJYYGHrjv8HMV
4ynLkrzx4q9DgwKhS9nudoCDzTcaKN7Ny3nygLTHnSTZ8TnLT69DDMYWfRFQmYTN2LFF1CeMiTWT3DwzSZAxdnYC

GRAF TOKEN ADDRESS: 9EL3CHVQS3nwUFhyVT7AGbttRsbJ5UE8Qjnw5ZAtkUhr

//https://mainnet.helius-rpc.com/?api-key=4de02eea-53aa-419c-9967-c62f3539a3ac
MAINNET_ENDPOINT = "https://rpc.shyft.to?api_key=182ixiFmvj9kurXA"




/////////////////////////

const solanaWeb3 = require('@solana/web3.js');
const bs58 = require('bs58');

// Generate a new random keypair
const keypair = solanaWeb3.Keypair.generate();

// Get the secret key (private key) and public key
const secretKey = keypair.secretKey;
const publicKey = keypair.publicKey.toString();
const secretKeyEncoded = bs58.encode(secretKey);

console.log('Public Key:', publicKey);
console.log('Secret Key:', Buffer.from(secretKey).toString('hex'));
console.log("Secret Key Encoded: ", secretKeyEncoded.toString());

// PUB KEY: 5wotKZQU7E64Jj1kGrxfmJoNcunhsfWiqNs6yxnxYkRh
// SECRET KEY: 395b464ae42691a928f1c25f5f3230fa571c8a266d16ad1c4a7fbc9c49be5b0d49791fce1990451a555ea5434ef83d77d3922f967a18c97e5318997d13e1c1cc
// SECRET KEY ENCODED: 29Wdvcw4vnvP7WbwbwQKv8sBWVbnDzgZCBcXDfxW2bKxss3xPtvVLwgvhLzr126diyjUMSDrwJhRJYYGHrjv8HMV


//////////////////////////////

TODO:
//////////////////////////////////////////////////////////////////////////////////////////
- Update environment variables in .env.copy
- Review volume swap, especially ...array variables in boost_volume.js
- Update slippage settings in config.js
- onProgramAccountChange is deprecated, use ProgramAccountSubscriptionConfig instead??? Look into ProgramAccountSubscriptionConfig
//////////////////////////////////////////////////////////////////////////////////////////



check_balance.js
getPublicKeyFromSolDomain(domain)
Need to be careful with using this function (what is getDomainKeySync)

!Important

- This is what makes it a volume bot:
instructions: [
      ...[
        ComputeBudgetProgram.setComputeUnitLimit({
          units: 200000,
        }),
        ComputeBudgetProgram.setComputeUnitPrice({
          microLamports: 9000,
        }),
      ],
      ...buy_instruction.instructions,
      ...sell_instruction.instructions,

- Review swapOnlyAMM function in swap.js
- Understand input.usage feature and functions (Why are they returning innerTransactions swap.js line 88)
- Jito fees should be between 0.0001 - 0.001 (listen to that guy on telegram)

Notes:
- Promise represents the completion of an async operation (similar to Task in C#)
- Raydium usings GraphQL to query LP for token data

Questions:

1. What is commander package? How does program.option() and program.action() work? how is it able to generate a CLI?
2. What is the computer budget program?
3. Read-write account? Review accounts in Solana
4. What is an address lookup table account?
5. What is a versioned Message?
6. What is a PDA (Program Derived Account) -> Has something to do with cryptographic curve
7. What is WSOL?
8. Review ProgramID? TokenID? Token Program ID????
9. WHAT THE FUCK IS JITO
10. Do transactions need to be confirmed?
11. Should slippage be good at 3%?
12. How is the raydium pool fee charged?
13. onProgramAccountChange is deprecated, use ProgramSubscriptionConfig instead???

Questions for Vincent:
1. How do you decide how many microLamports should be used in each TransactionMessage
2. Do you think 3 max attempts is good?


(Noteable Program IDs)
- export const SYSTEM_PROGRAM_ID = SystemProgram.programId
- export const MEMO_PROGRAM_ID = new PublicKey('MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr')
- export const RENT_PROGRAM_ID = new PublicKey('SysvarRent111111111111111111111111111111111')
- export const METADATA_PROGRAM_ID = new PublicKey('metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s')
- export const INSTRUCTION_PROGRAM_ID = new PublicKey('Sysvar1nstructions1111111111111111111111111')

9. What is "So11111111111111111111111111111111111111112";
10. What is BN? (Line 290 swap.js)


TRANSACTIONS:

(Make sure this is right?)

- What are instructions?
[ address | recentblockhash | instructions |___________]

TransactionMessage:
payerKey: PublicKey;
instructions: Array<TransactionInstruction>;
recentBlockhash: Blockhash;                     // Blockhash is a base58 string

TransactionInstructinos:
// public keys to include in this transaction
// boolean represents whether this pubkey needs to sign the transaction
keys: Array<AccountMeta>;
// Program Id to execute
programId: PublicKey;
// Program Input, decodes a string of Base64-encoded data into bytes, and encodes those bytes into a string uisng Latin-1 (ISO-8859-1)  
data: Buffer;

AccountMeta:
// An account's public key
pubkey: PubKey
// true if an instruction requires a transaction signature matching pubkey
isSigner: Boolean
// true if the pubkey can be loaded as a read-write account
isWritable: Boolean


(GRAF)
node boost_volume --token_address 9EL3CHVQS3nwUFhyVT7AGbttRsbJ5UE8Qjnw5ZAtkUhr --cluster mainnet --sol_per_order 0.00001

(RAMY)
node boost_volume --token_address CVDfKWNF7cojbjDYMZK6U4wKWSzs4PqKiyceNaJszvEj --cluster mainnet --sol_per_order 0.00001

https://mainnet.helius-rpc.com/?api-key=448fa184-4e3c-419b-a456-e9fd6889b659